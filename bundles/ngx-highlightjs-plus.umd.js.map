{"version":3,"file":"ngx-highlightjs-plus.umd.js","sources":["ng://ngx-highlightjs/plus/gist.model.ts","ng://ngx-highlightjs/plus/code-loader.ts","ng://ngx-highlightjs/plus/gist.ts","ng://ngx-highlightjs/plus/code-from-url.ts","ng://ngx-highlightjs/plus/highlight-plus.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface GistOptions {\n  clientId: string;\n  clientSecret: string;\n}\n\nexport const GIST_OPTIONS = new InjectionToken<GistOptions>('GIST_OPTIONS');\n\ninterface Owner {\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n}\n\ninterface User {\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n}\n\ninterface ChangeStatus {\n  total: number;\n  additions: number;\n  deletions: number;\n}\n\ninterface History {\n  user: User;\n  version: string;\n  committed_at: Date;\n  change_status: ChangeStatus;\n  url: string;\n}\n\ninterface Files {\n  [fileName: string]: {\n    filename: string;\n    type: string;\n    language: string;\n    raw_url: string;\n    size: number;\n    truncated: boolean;\n    content: string;\n  };\n}\n\nexport interface Gist {\n  url: string;\n  forks_url: string;\n  commits_url: string;\n  id: string;\n  node_id: string;\n  git_pull_url: string;\n  git_push_url: string;\n  html_url: string;\n  files: Files;\n  public: boolean;\n  created_at: Date;\n  updated_at: Date;\n  description: string;\n  comments: number;\n  user?: any;\n  comments_url: string;\n  owner: Owner;\n  forks: any[];\n  history: History[];\n  truncated: boolean;\n}\n\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, EMPTY } from 'rxjs';\nimport { catchError, publishReplay, refCount } from 'rxjs/operators';\nimport { Gist, GIST_OPTIONS, GistOptions } from './gist.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeLoader {\n  constructor(private _http: HttpClient, @Optional() @Inject(GIST_OPTIONS) private _options: GistOptions) {\n  }\n\n  /**\n   * Get plus code\n   * @param id Gist ID\n   */\n  getCodeFromGist(id: string): Observable<Gist> {\n    let params: HttpParams;\n    if (this.isOAuthProvided()) {\n      params = new HttpParams().set('client_id', this._options.clientId).set('client_secret', this._options.clientSecret);\n    }\n    return this.fetchFile(`https://api.github.com/gists/${id}`, { params, responseType: 'json' });\n  }\n\n  /**\n   * Get code by URL\n   * @param url File raw link\n   */\n  getCodeFromUrl(url: string): Observable<string> {\n    return this.fetchFile(url, { responseType: 'text' });\n  }\n\n  /**\n   * Check if OAuth option is provided\n   */\n  private isOAuthProvided(): boolean {\n    return !!this._options && !!this._options.clientId && !!this._options.clientSecret;\n  }\n\n  private fetchFile(url: string, options: any): Observable<any> {\n    // Check if URL is valid\n    if (isUrl(url)) {\n      return this._http.get(url, options).pipe(\n        // Catch response\n        publishReplay(1),\n        refCount(),\n        catchError((err: Error) => {\n          console.error('[NgxHighlight]: Unable to fetch the URL!', err.message);\n          return EMPTY;\n        })\n      );\n    }\n    return EMPTY;\n  }\n\n}\n\nfunction isUrl(url: string) {\n  const regExp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n  return regExp.test(url);\n}\n","import { Directive, Pipe, Input, Output, PipeTransform, EventEmitter } from '@angular/core';\nimport { CodeLoader } from './code-loader';\nimport { Gist } from './gist.model';\n\n@Directive({\n  selector: '[gist]'\n})\nexport class GistDirective {\n\n  constructor(private _loader: CodeLoader) {\n  }\n\n  @Input()\n  private set gist(value: string) {\n    if (value) {\n      this._loader.getCodeFromGist(value).subscribe((gist: Gist) => this.gistLoad.emit(gist));\n    }\n  }\n\n  @Output() gistLoad = new EventEmitter<Gist>();\n}\n\n@Pipe({\n  name: 'gistFile'\n})\nexport class GistFilePipe implements PipeTransform {\n  transform(gist: Gist, fileName: string): string | null {\n    return (gist && gist.files && gist.files[fileName]) ? gist.files[fileName].content : null;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CodeLoader } from './code-loader';\n\n@Pipe({\n  name: 'codeFromUrl'\n})\nexport class CodeFromUrlPipe implements PipeTransform {\n\n  constructor(private _loader: CodeLoader) {\n  }\n\n  transform(url: string): Observable<string> {\n    return this._loader.getCodeFromUrl(url);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HighlightModule } from 'ngx-highlightjs';\n// Uncomment the following line for development\n// import { HighlightModule } from '../../src/public-api';\nimport { GistFilePipe, GistDirective } from './gist';\nimport { CodeFromUrlPipe } from './code-from-url';\n\n@NgModule({\n  imports: [\n    HighlightModule,\n    HttpClientModule\n  ],\n  declarations: [\n    GistDirective,\n    GistFilePipe,\n    CodeFromUrlPipe\n  ],\n  exports: [\n    HighlightModule,\n    GistDirective,\n    GistFilePipe,\n    CodeFromUrlPipe\n  ]\n})\nexport class HighlightPlusModule {\n}\n"],"names":["InjectionToken","HttpParams","publishReplay","refCount","catchError","EMPTY","Injectable","HttpClient","Optional","Inject","EventEmitter","Directive","Input","Output","Pipe","NgModule","HighlightModule","HttpClientModule"],"mappings":"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"}