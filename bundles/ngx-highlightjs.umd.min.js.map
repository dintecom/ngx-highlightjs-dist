{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-highlightjs/lib/highlight.model.ts","ng://ngx-highlightjs/lib/highlight.loader.ts","ng://ngx-highlightjs/lib/highlight.service.ts","ng://ngx-highlightjs/lib/highlight.ts","ng://ngx-highlightjs/lib/highlight.module.ts"],"names":["__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","HIGHLIGHT_OPTIONS","InjectionToken","HighlightLoader","doc","platformId","_options","_this","this","_ready","BehaviorSubject","ready","asObservable","pipe","filter","hljs","take","isPlatformBrowser","defaultView","_loadLibrary","switchMap","lineNumbers","importModule","import","tap","EMPTY","catchError","console","subscribe","prototype","languages","Object","keys","length","from","_loadLanguages","entries","map","_a","_b","langName","langLoader","langFunc","registerLanguage","zip","apply","arguments","concat","__spread","Injectable","args","providedIn","Inject","DOCUMENT","PLATFORM_ID","Optional","type","moduleLoader","module","default","HighlightJS","_loader","options","_hljs","config","configure","listLanguages","defineProperty","highlight","name","ignore_illegals","continuation","highlightAuto","languageSubset","fixMarkup","highlightBlock","block","initHighlighting","language","getLanguage","lineNumbersBlock","el","Highlight","highlighted","EventEmitter","_nativeElement","nativeElement","ngOnChanges","changes","code","currentValue","previousValue","highlightElement","setCode","escapeHtml","res","addLineNumbers","emit","destroyLineNumbersObserver","animationFrameScheduler","schedule","_lineNumbersObs","MutationObserver","firstElementChild","tagName","toUpperCase","classList","add","observe","childList","disconnect","content","innerHTML","entityMap","&","<",">","\"","'","/","`","=","String","replace","s","Directive","host","[class.hljs]","selector","ElementRef","Input","Output","HighlightModule","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { InjectionToken } from '@angular/core';\n\nexport interface HighlightLibrary {\n\n  /**\n   * Core highlighting function.\n   * @param name Accepts a language name, or an alias\n   * @param value A string with the code to highlight.\n   * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\n   * even in case of detecting illegal syntax for the language instead of throwing an exception.\n   * @param continuation An optional mode stack representing unfinished parsing.\n   * When present, the function will restart parsing from this state instead of initializing a new one\n   */\n  highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): HighlightResult;\n\n  /**\n   * Highlighting with language detection.\n   * @param value Accepts a string with the code to highlight\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\n   */\n  highlightAuto(value: string, languageSubset: string[]): HighlightResult;\n\n  /**\n   * Post-processing of the highlighted markup.\n   * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\n   * Options are set globally with configure.\n   * @param value Accepts a string with the highlighted markup\n   */\n  fixMarkup(value: string): string;\n\n  /**\n   * Applies highlighting to a DOM node containing code.\n   * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\n   * See the class reference for all available language names and aliases.\n   * @param block The element to apply highlight on.\n   */\n  highlightBlock(block: HTMLElement): void;\n\n  /**\n   * Configures global options:\n   * @param config HighlightJs configuration argument\n   */\n  configure(config: HighlightConfig): void;\n\n  /**\n   * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n   */\n  initHighlighting(): void;\n\n  /**\n   * Adds new language to the library under the specified name. Used mostly internally.\n   * @param name A string with the name of the language being registered\n   * @param language A function that returns an object which represents the language definition.\n   * The function is passed the hljs object to be able to use common regular expressions defined within it.\n   */\n  registerLanguage(name: string, language: () => any): void;\n\n  /**\n   * @return The languages names list.\n   */\n  listLanguages(): string[];\n\n  /**\n   * Looks up a language by name or alias.\n   * @param name Language name\n   * @return The language object if found, undefined otherwise.\n   */\n  getLanguage(name: string): any;\n\n  /**\n   * Add line numbers to code element\n   * @param el Code element\n   */\n  lineNumbersBlock(el: Element): void;\n}\n\nexport interface HighlightConfig {\n  /** tabReplace: a string used to replace TAB characters in indentation. */\n  tabReplace?: string;\n  /** useBR: a flag to generate <br> tags instead of new-line characters in the output, useful when code is marked up using a non-<pre> container. */\n  useBR?: boolean;\n  /** classPrefix: a string prefix added before class names in the generated markup, used for backwards compatibility with stylesheets. */\n  classPrefix?: string;\n  /** languages: an array of language names and aliases restricting auto detection to only these languages. */\n  languages?: string[];\n}\n\nexport interface HighlightResult {\n  language?: string;\n  second_best?: any;\n  top?: any;\n  value?: string;\n  relevance?: number;\n}\n\nexport interface HighlightOptions {\n  config?: HighlightConfig;\n  languages?: { [name: string]: () => Promise<any> };\n  lineNumbers?: boolean;\n}\n\nexport const HIGHLIGHT_OPTIONS = new InjectionToken<HighlightOptions>('HIGHLIGHT_OPTIONS');\n","import { Injectable, Inject, PLATFORM_ID, Optional } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { BehaviorSubject, Observable, from, EMPTY, zip } from 'rxjs';\nimport { catchError, tap, map, switchMap, filter, take } from 'rxjs/operators';\nimport { HIGHLIGHT_OPTIONS, HighlightLibrary, HighlightOptions } from './highlight.model';\n\n// @dynamic\n@Injectable({\n  providedIn: 'root'\n})\nexport class HighlightLoader {\n  // Stream that emits when hljs library is loaded and ready to use\n  private readonly _ready = new BehaviorSubject(null);\n  readonly ready = this._ready.asObservable().pipe(\n    filter((hljs: HighlightLibrary) => !!hljs),\n    take(1)\n  );\n\n  constructor(@Inject(DOCUMENT) doc: any,\n              @Inject(PLATFORM_ID) platformId: object,\n              @Optional() @Inject(HIGHLIGHT_OPTIONS) private _options: HighlightOptions) {\n    // Check if hljs is already available\n    if (isPlatformBrowser(platformId) && doc.defaultView.hljs) {\n      this._ready.next(doc.defaultView.hljs);\n    } else {\n      // Load hljs library\n      this._loadLibrary().pipe(\n        switchMap((hljs: HighlightLibrary) => {\n          if (this._options && this._options.lineNumbers) {\n            // Make hljs available on window object (required for the line numbers library)\n            doc.defaultView.hljs = hljs;\n            // Load line numbers library\n            return loadLineNumbers().pipe(tap(() => this._ready.next(hljs)));\n          } else {\n            this._ready.next(hljs);\n            return EMPTY;\n          }\n        }),\n        catchError((e: any) => {\n          console.error('Unable to load hljs library', e);\n          return EMPTY;\n        })\n      ).subscribe();\n    }\n  }\n\n  /**\n   * Lazy-Load highlight.js library\n   */\n  private _loadLibrary(): Observable<any> {\n    return (this._options && this._options.languages && Object.keys(this._options.languages).length)\n      ? from(loadCoreLibrary()).pipe(switchMap((hljs: HighlightLibrary) => this._loadLanguages(hljs)))\n      : from(loadAllLibrary());\n  }\n\n  /**\n   * Lazy-load highlight.js languages\n   */\n  private _loadLanguages(hljs: HighlightLibrary): Observable<any> {\n    const languages = Object.entries(this._options.languages).map(([langName, langLoader]) =>\n      importModule(langLoader()).pipe(\n        tap((langFunc: any) => hljs.registerLanguage(langName, langFunc))\n      )\n    );\n    return zip(...languages).pipe(map(() => hljs));\n  }\n}\n\n/**\n * Import highlight.js core library\n */\nfunction loadCoreLibrary(): Observable<HighlightLibrary> {\n  return importModule(import('highlight.js/lib/highlight'));\n}\n\n/**\n * Import highlight.js library with all languages\n */\nfunction loadAllLibrary(): Observable<HighlightLibrary> {\n  return importModule(import('highlight.js'));\n}\n\n/**\n * Import line numbers library\n */\nfunction loadLineNumbers(): Observable<any> {\n  return importModule(import('highlightjs-line-numbers.js'));\n}\n\n/**\n * Map loader response to module object\n */\nconst importModule = (moduleLoader: Promise<any>): Observable<any> => {\n  return from(moduleLoader).pipe(\n    filter((module: any) => !!module && !!module.default),\n    map((module: any) => module.default)\n  );\n};\n","import { Injectable, Inject, Optional } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { HighlightConfig, HighlightResult, HighlightLibrary, HighlightOptions, HIGHLIGHT_OPTIONS } from './highlight.model';\nimport { HighlightLoader } from './highlight.loader';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HighlightJS {\n\n  private _hljs!: HighlightLibrary;\n\n  // A reference for hljs library\n  get hljs(): HighlightLibrary | null {\n    return this._hljs;\n  }\n\n  constructor(private _loader: HighlightLoader, @Optional() @Inject(HIGHLIGHT_OPTIONS) options: HighlightOptions) {\n    // Load highlight.js library on init\n    _loader.ready.pipe().subscribe((hljs: HighlightLibrary) => {\n      this._hljs = hljs;\n      if (options && options.config) {\n        // Set global config if present\n        hljs.configure(options.config);\n        if (hljs.listLanguages().length < 1) {\n          console.error('[HighlightJS]: No languages were registered!');\n        }\n      }\n    });\n  }\n\n  /**\n   * Core highlighting function.\n   * @param name Accepts a language name, or an alias\n   * @param value A string with the code to highlight.\n   * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\n   * even in case of detecting illegal syntax for the language instead of throwing an exception.\n   * @param continuation An optional mode stack representing unfinished parsing.\n   * When present, the function will restart parsing from this state instead of initializing a new one\n   */\n  highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): Observable<HighlightResult> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.highlight(name, value, ignore_illegals, continuation))\n    );\n  }\n\n  /**\n   * Highlighting with language detection.\n   * @param value Accepts a string with the code to highlight\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\n   */\n  highlightAuto(value: string, languageSubset: string[]): Observable<HighlightResult> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.highlightAuto(value, languageSubset))\n    );\n  }\n\n  /**\n   * Post-processing of the highlighted markup.\n   * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\n   * Options are set globally with configure.\n   * @param value Accepts a string with the highlighted markup\n   */\n  fixMarkup(value: string): Observable<string> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.fixMarkup(value))\n    );\n  }\n\n  /**\n   * Applies highlighting to a DOM node containing code.\n   * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\n   * See the class reference for all available language names and aliases.\n   * @param block The element to apply highlight on.\n   */\n  highlightBlock(block: HTMLElement): Observable<void> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.highlightBlock(block))\n    );\n  }\n\n  /**\n   * Configures global options:\n   * @param config HighlightJs configuration argument\n   */\n  configure(config: HighlightConfig): Observable<void> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.configure(config))\n    );\n  }\n\n  /**\n   * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n   */\n  initHighlighting(): Observable<void> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.initHighlighting())\n    );\n  }\n\n  /**\n   * Adds new language to the library under the specified name. Used mostly internally.\n   * @param name A string with the name of the language being registered\n   * @param language A function that returns an object which represents the language definition.\n   * The function is passed the hljs object to be able to use common regular expressions defined within it.\n   */\n  registerLanguage(name: string, language: () => any): Observable<HighlightLibrary> {\n    return this._loader.ready.pipe(\n      tap((hljs: HighlightLibrary) => hljs.registerLanguage(name, language))\n    );\n  }\n\n  /**\n   * @return The languages names list.\n   */\n  listLanguages(): Observable<string[]> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.listLanguages())\n    );\n  }\n\n  /**\n   * Looks up a language by name or alias.\n   * @param name Language name\n   * @return The language object if found, undefined otherwise.\n   */\n  getLanguage(name: string): Observable<any> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.getLanguage(name))\n    );\n  }\n\n  /**\n   * Display line numbers\n   * @param el Code element\n   */\n  lineNumbersBlock(el: HTMLElement): Observable<any> {\n    return this._loader.ready.pipe(\n      filter((hljs: HighlightLibrary) => !!hljs.lineNumbersBlock),\n      tap((hljs: HighlightLibrary) => hljs.lineNumbersBlock(el))\n    );\n  }\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  Inject,\n  Optional,\n  OnChanges,\n  SimpleChanges,\n  EventEmitter,\n  ElementRef\n} from '@angular/core';\nimport { animationFrameScheduler } from 'rxjs';\nimport { HighlightJS } from './highlight.service';\nimport { HIGHLIGHT_OPTIONS, HighlightOptions, HighlightResult } from './highlight.model';\n\n@Directive({\n  host: {\n    '[class.hljs]': 'true'\n  },\n  selector: '[highlight]'\n})\nexport class Highlight implements OnChanges {\n\n  // Highlighted Code\n  private readonly _nativeElement: HTMLElement;\n\n  // Temp observer to observe when line numbers has been added to code element\n  private _lineNumbersObs: any;\n\n  // Highlight code input\n  @Input('highlight') code!: string;\n\n  // An optional array of language names and aliases restricting detection to only those languages.\n  // The subset can also be set with configure, but the local parameter overrides the option if set.\n  @Input() languages!: string[];\n\n  // Show line numbers\n  @Input() lineNumbers!: boolean;\n\n  // Stream that emits when code string is highlighted\n  @Output() highlighted = new EventEmitter<HighlightResult>();\n\n  constructor(el: ElementRef,\n              private _hljs: HighlightJS,\n              @Optional() @Inject(HIGHLIGHT_OPTIONS) private _options: HighlightOptions) {\n    this._nativeElement = el.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (\n      changes.code &&\n      changes.code.currentValue &&\n      changes.code.currentValue !== changes.code.previousValue\n    ) {\n      this.highlightElement(this.code, this.languages);\n    }\n  }\n\n  /**\n   * Highlighting with language detection and fix markup.\n   * @param code Accepts a string with the code to highlight\n   * @param languages An optional array of language names and aliases restricting detection to only those languages.\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\n   */\n  highlightElement(code: string, languages?: string[]): void {\n    // Set code text before highlighting\n    this.setCode(this.escapeHtml(code));\n    this._hljs.highlightAuto(code, languages).subscribe((res: any) => {\n      // Set highlighted code\n      this.setCode(res.value);\n      // Check if user want to show line numbers\n      if (this.lineNumbers && this._options && this._options.lineNumbers) {\n        this.addLineNumbers();\n      }\n      // Forward highlight response to the highlighted output\n      this.highlighted.emit(res);\n    });\n  }\n\n  private addLineNumbers() {\n    // Clean up line numbers observer\n    this.destroyLineNumbersObserver();\n    animationFrameScheduler.schedule(() => {\n      // Add line numbers\n      this._hljs.lineNumbersBlock(this._nativeElement).subscribe();\n      // If lines count is 1, the line numbers library will not add numbers\n      // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element\n      this._lineNumbersObs = new MutationObserver(() => {\n        if (this._nativeElement.firstElementChild.tagName.toUpperCase() === 'TABLE') {\n          this._nativeElement.classList.add('hljs-line-numbers');\n        }\n        this.destroyLineNumbersObserver();\n      });\n      this._lineNumbersObs.observe(this._nativeElement, { childList: true });\n    });\n  }\n\n  private destroyLineNumbersObserver() {\n    if (this._lineNumbersObs) {\n      this._lineNumbersObs.disconnect();\n      this._lineNumbersObs = null;\n    }\n  }\n\n  private setCode(content: string) {\n    animationFrameScheduler.schedule(() => this._nativeElement.innerHTML = content);\n  }\n\n  private escapeHtml(content: string) {\n    const entityMap = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;',\n      '/': '&#x2F;',\n      '`': '&#x60;',\n      '=': '&#x3D;'\n    };\n    return String(content).replace(/[&<>\"'`=\\/]/g, s => entityMap[s]);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Highlight } from './highlight';\n\n@NgModule({\n  declarations: [Highlight],\n  exports: [Highlight]\n})\nexport class HighlightModule {\n}\n"]}